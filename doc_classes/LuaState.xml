<?xml version="1.0" encoding="UTF-8" ?>
<class name="LuaState" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A Lua virtual machine instance.
	</brief_description>
	<description>
		The LuaState class is a Lua virtual machine instance. It provides methods to execute Lua code, manage Lua tables, and interact with Lua's global environment.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="are_libraries_opened" qualifiers="const">
			<return type="bool" />
			<param index="0" name="libraries" type="int" enum="LuaState.Library" is_bitfield="true" />
			<description>
				Checks if the specified [param libraries] are opened.
			</description>
		</method>
		<method name="create_function">
			<return type="LuaFunction" />
			<param index="0" name="callable" type="Callable" />
			<description>
				Creates and returns a new [LuaFunction] from the given [Callable].
				[codeblocks]
				[gdscript]
				var state := LuaState.new()
				state.globals["say"] = state.create_function(func():
				    print("hello!")
				)
				state.do_string("say()") # Prints "hello!"
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="create_table">
			<return type="LuaTable" />
			<param index="0" name="initial_values" type="Dictionary" default="{}" />
			<description>
				Creates and returns a new [LuaTable] initialized with the given dictionary.
				[codeblocks]
				[gdscript]
				var table = lua_state.create_table({
				    "foo": "bar",
				    "baz": 42
				})
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="do_buffer">
			<return type="Variant" />
			<param index="0" name="chunk" type="PackedByteArray" />
			<param index="1" name="chunkname" type="String" default="&quot;&quot;" />
			<param index="2" name="mode" type="int" enum="LuaState.LoadMode" default="0" />
			<param index="3" name="env" type="LuaTable" default="null" />
			<description>
				Executes Lua code from a byte array.
				[param chunk] is the Lua code in byte array format.
				[param chunkname] is the name of the chunk, used in error messages and debug information.
				[param mode] specifies the loading mode, which can be [constant LOAD_MODE_ANY], [constant LOAD_MODE_TEXT], or [constant LOAD_MODE_BINARY].
				Returns a [Variant] if the execution produces a result. Returns a [LuaError] if there are compilation errors.
				[codeblocks]
				[gdscript]
				var str := """
				    local data = {
				        attack_point = 1,
				        life_point = 10
				    }
				    return data
				"""
				var buffer := str.to_utf8_buffer() # Let's do a simulation here
				var data = state.do_buffer(buffer, "", LuaState.LoadMode.LOAD_MODE_TEXT)
				print(data.to_dictionary()) # Prints { "attack_point": 1, "life_point": 10 }
				[/gdscript]
				[/codeblocks]
				Example using [constant LOAD_MODE_BINARY]
				[codeblocks]
				[gdscript]
				# Assuming hello.lua contains: print("Hello!")
				# .luac files are typically generated from .lua files using:
				# luac -o target_file.luac source_file.lua
				# Note: The Lua version used to generate .luac should match the library's version.
				state.do_file("hello.luac", LuaState.LOAD_MODE_BINARY) # Prints Hello!
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="do_file">
			<return type="Variant" />
			<param index="0" name="filename" type="String" />
			<param index="1" name="mode" type="int" enum="LuaState.LoadMode" default="0" />
			<param index="2" name="env" type="LuaTable" default="null" />
			<description>
				Executes Lua code from a file.
				[param filename] Supports both absolute and relative paths. Defaults to searching in the "res://" directory.
				[param mode] specifies the loading mode, which can be [constant LOAD_MODE_ANY], [constant LOAD_MODE_TEXT], or [constant LOAD_MODE_BINARY].
				Returns a [Variant] if the execution produces a result. Returns a [LuaError] if there are compilation or runtime errors.
			</description>
		</method>
		<method name="do_string">
			<return type="Variant" />
			<param index="0" name="chunk" type="String" />
			<param index="1" name="chunkname" type="String" default="&quot;&quot;" />
			<param index="2" name="env" type="LuaTable" default="null" />
			<description>
				Executes Lua code from a string.
				Returns a [Variant] if the execution produces a result. Returns a [LuaError] if there are compilation or runtime errors.
			</description>
		</method>
		<method name="get_lua_exec_dir" qualifiers="static">
			<return type="String" />
			<description>
				static method to get the executable directory used to replace [code]"!"[/code] when setting package_path and package_cpath properties.
				When running in the Godot editor, it returns the globalized version of [code]res://[/code] path. Otherwise, it returns the base directory of the executable.
			</description>
		</method>
		<method name="get_lua_runtime" qualifiers="static">
			<return type="String" />
			<description>
				Returns the current Lua runtime that is being used, either [code]"lua"[/code] or [code]"luajit"[/code].
			</description>
		</method>
		<method name="get_lua_version_num" qualifiers="static">
			<return type="int" />
			<description>
				Returns the current Lua version number as defined in the Lua header.
				In Lua 5.4 the value is [code]504[/code] and in Lua 5.1 / LuaJIT it's [code]501[/code].
			</description>
		</method>
		<method name="get_lua_version_string" qualifiers="static">
			<return type="String" />
			<description>
				Returns the current Lua version string as defined in the Lua header, for example [code]"Lua 5.4"[/code].
				When using the LuaJIT runtime, returns [code]"Lua 5.1"[/code].
			</description>
		</method>
		<method name="load_buffer">
			<return type="Variant" />
			<param index="0" name="chunk" type="PackedByteArray" />
			<param index="1" name="chunkname" type="String" default="&quot;&quot;" />
			<param index="2" name="mode" type="int" enum="LuaState.LoadMode" default="0" />
			<param index="3" name="env" type="LuaTable" default="null" />
			<description>
				Loads Lua code from a byte array and returns it as a [LuaFunction].
				[param chunk] is the Lua code in byte array format.
				[param chunkname] is the name of the chunk, used in error messages and debug information.
				[param mode] specifies the loading mode, which can be [constant LOAD_MODE_ANY], [constant LOAD_MODE_TEXT], or [constant LOAD_MODE_BINARY].
				[codeblocks]
				[gdscript]
				# Assuming hello.lua contains: print("Hello!")
				# .luac files are typically generated from .lua files using:
				# luac -o target_file.luac source_file.lua
				# Note: The Lua version used to generate .luac should match the library's version.
				var buffer := FileAccess.get_file_as_bytes("res://hello.luac")
				state.do_buffer(buffer, "", LuaState.LOAD_MODE_BINARY) # Prints Hello!
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="load_file">
			<return type="Variant" />
			<param index="0" name="filename" type="String" />
			<param index="1" name="mode" type="int" enum="LuaState.LoadMode" default="0" />
			<param index="2" name="env" type="LuaTable" default="null" />
			<description>
				Loads Lua code from a file and returns it as a [LuaFunction].
				[param filename] Supports both absolute and relative paths. Defaults to searching in the "res://" directory.
				[param mode] specifies the loading mode, which can be [constant LOAD_MODE_ANY], [constant LOAD_MODE_TEXT], or [constant LOAD_MODE_BINARY].
				Returns a [LuaError] if there are compilation errors.
			</description>
		</method>
		<method name="load_string">
			<return type="Variant" />
			<param index="0" name="chunk" type="String" />
			<param index="1" name="chunkname" type="String" default="&quot;&quot;" />
			<param index="2" name="env" type="LuaTable" default="null" />
			<description>
				Loads Lua code from a string and returns it as a [LuaFunction].
				Returns a [LuaError] if there are compilation errors.
			</description>
		</method>
		<method name="open_libraries">
			<return type="void" />
			<param index="0" name="libraries" type="int" enum="LuaState.Library" is_bitfield="true" default="524287" />
			<description>
				Opens specified Lua libraries. See [enum Library] for available options.
				By default, opens all libraries. LUA_BASE must be included when opening other libraries.
				[codeblocks]
				[gdscript]
				# Open LUA_BASE and LUA_PACKAGE
				var lua_state = LuaState.new()
				lua_state.open_libraries(LuaState.LUA_BASE | LuaState.LUA_PACKAGE)

				# Without LUA_BASE will fail
				var lua_state = LuaState.new()
				lua_state.open_libraries(LuaState.LUA_PACKAGE)
				print(state.globals.to_dictionary()) # Prints "{}"
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
	</methods>
	<members>
		<member name="globals" type="LuaTable" setter="" getter="get_globals">
			Returns the _G table of the LuaState.
			The _G table is the global table accessible to Lua scripts.
		</member>
		<member name="main_thread" type="LuaThread" setter="" getter="get_main_thread">
			The main thread of execution of the LuaState.
		</member>
		<member name="package_cpath" type="String" setter="set_package_cpath" getter="get_package_cpath">
			The search path for Lua C extension modules. Equivalent to Lua's [code]package.cpath[/code] variable.
			When you use the [code]require[/code] function to load a C extension module, Lua searches the paths defined in [code]package.cpath[/code].
		</member>
		<member name="package_path" type="String" setter="set_package_path" getter="get_package_path">
			The search path for Lua modules. Equivalent to Lua's [code]package.path[/code] variable.
			When you use the [code]require[/code] function to load a Lua module, Lua searches the paths defined in [code]package.path[/code].
		</member>
		<member name="registry" type="LuaTable" setter="" getter="get_registry">
			Returns the registry table of the LuaState.
			The registry table is private and not accessible to Lua scripts.
			Can be used in GDScript.
		</member>
	</members>
	<constants>
		<constant name="LUA_BASE" value="1" enum="Library" is_bitfield="true">
			Lua base library. Includes [code]_G[/code], [code]print[/code], [code]load[/code], and other basic Lua functions.
		</constant>
		<constant name="LUA_PACKAGE" value="2" enum="Library" is_bitfield="true">
			Lua package library. Adds the [code]package[/code] table to _G. Includes [code]preload[/code], [code]searchpath[/code], and [code]path[/code].
		</constant>
		<constant name="LUA_COROUTINE" value="4" enum="Library" is_bitfield="true">
			Lua coroutine library. Adds the [code]coroutine[/code] table to _G. Includes [code]yield[/code], [code]resume[/code], and [code]wrap[/code].
		</constant>
		<constant name="LUA_STRING" value="8" enum="Library" is_bitfield="true">
			Lua string library. Adds the [code]string[/code] table to _G. Includes [code]byte[/code], [code]find[/code], [code]format[/code], and [code]len[/code].
		</constant>
		<constant name="LUA_OS" value="16" enum="Library" is_bitfield="true">
			Lua OS library. Adds the [code]os[/code] table to _G. Includes [code]clock[/code], [code]execute[/code], and [code]getenv[/code].
		</constant>
		<constant name="LUA_MATH" value="32" enum="Library" is_bitfield="true">
			Lua math library. Adds the [code]math[/code] table to _G. Includes [code]abs[/code], [code]pi[/code], [code]tan[/code], and [code]cos[/code].
		</constant>
		<constant name="LUA_TABLE" value="64" enum="Library" is_bitfield="true">
			Lua table library. Adds the [code]table[/code] table to _G. Includes [code]insert[/code], [code]move[/code], and [code]remove[/code].
		</constant>
		<constant name="LUA_DEBUG" value="128" enum="Library" is_bitfield="true">
			Lua debug library. Adds the [code]debug[/code] table to _G. Includes [code]traceback[/code], [code]debug[/code], and [code]upvalueid[/code].
		</constant>
		<constant name="LUA_BIT32" value="256" enum="Library" is_bitfield="true">
			Lua bit32 library. Adds the [code]bit32[/code] table to _G. Includes [code]band[/code] and [code]bor[/code]. [b]Note: Lua 5.4 has built-in bit operators and removed this library. Only available when using the LuaJIT runtime.[/b]
		</constant>
		<constant name="LUA_IO" value="512" enum="Library" is_bitfield="true">
			Lua IO library. Adds the [code]io[/code] table to _G. Includes [code]open[/code], [code]close[/code], and [code]write[/code].
		</constant>
		<constant name="LUA_FFI" value="1024" enum="Library" is_bitfield="true">
			LuaJIT FFI library. [b]Note: only available when using the LuaJIT runtime.[/b]
		</constant>
		<constant name="LUA_JIT" value="2048" enum="Library" is_bitfield="true">
			LuaJIT library. [b]Note: only available when using the LuaJIT runtime.[/b]
		</constant>
		<constant name="LUA_UTF8" value="4096" enum="Library" is_bitfield="true">
			Lua UTF8 library. Adds the [code]utf8[/code] table to _G. Includes [code]char[/code] and [code]len[/code]. [b]Note: the LuaJIT runtime has no support for this library.[/b]
		</constant>
		<constant name="LUA_ALL_LIBS" value="8191" enum="Library" is_bitfield="true">
			Opens all Lua libraries. Equivalent to combining all Lua library flags.
		</constant>
		<constant name="GODOT_VARIANT" value="8192" enum="Library" is_bitfield="true">
			Godot variant library. Adds Godot Variant types like [AABB], [Vector3], and [Basis] to _G.
			[codeblocks]
			[gdscript]
			var lua_state = LuaState.new()
			lua_state.open_libraries(LuaState.Library.LUA_BASE | LuaState.Library.GODOT_VARIANT)
			var vec3 = lua_state.do_string("""
			    -- Create a Vector3 in Lua
			    local vec3 = Vector3(1, 2, 3)
			    return vec3
			""")
			print(vec3) # Prints "Vector3(1.0, 2.0, 3.0)"
			[/gdscript]
			[/codeblocks]
		</constant>
		<constant name="GODOT_UTILITY_FUNCTIONS" value="16384" enum="Library" is_bitfield="true">
			Godot utility functions library. Adds Godot utility functions like [code]print[/code] and [code]abs[/code] to _G.
			[b]Note: This may override some Lua functions like [code]print[/code].[/b]
		</constant>
		<constant name="GODOT_SINGLETONS" value="32768" enum="Library" is_bitfield="true">
			Godot singletons library. Adds global singletons like [Engine] and [ResourceLoader] to _G.
		</constant>
		<constant name="GODOT_CLASSES" value="65536" enum="Library" is_bitfield="true">
			Godot classes library. Adds Godot classes like [Node] to _G.
			[codeblocks]
			[gdscript]
			var lua_state = LuaState.new()
			lua_state.open_libraries(LuaState.Library.LUA_BASE | LuaState.Library.GODOT_CLASSES)
			var node = lua_state.do_string("""
			    -- Create a Node in Lua
			    local node = Node:new()
			    return node
			""")
			if node is Node:
			    print("Node created successfully")
			[/gdscript]
			[/codeblocks]
		</constant>
		<constant name="GODOT_ENUMS" value="131072" enum="Library" is_bitfield="true">
			Godot enums library. Adds all Godot enums from [@GlobalScope] to _G.
		</constant>
		<constant name="GODOT_LOCAL_PATHS" value="262144" enum="Library" is_bitfield="true">
			Adds support for Godot-specific local paths like [code]res://[/code] and [code]user://[/code] in Lua's package searchers, [code]loadfile[/code], and [code]dofile[/code].
			When this library is opened, Lua scripts can use Godot's local paths to load files, making it easier to integrate with Godot's file system.
			[codeblocks]
			[gdscript]
			var state = LuaState.new()
			state.open_libraries(LuaState.Library.LUA_BASE | LuaState.Library.GODOT_LOCAL_PATHS)
			var say = state.do_string("""
			    -- Load a Lua file from the "res://" directory
			    local module = dofile("res://scripts/welcome.lua")
			    return module.say_hello()
			""")
			print(say) # Prints "Hello!"
			[/gdscript]
			[/codeblocks]
		</constant>
		<constant name="GODOT_ALL_LIBS" value="516096" enum="Library" is_bitfield="true">
			Opens all Godot libraries. Equivalent to combining all Godot library flags.
		</constant>
		<constant name="ALL_LIBS" value="524287" enum="Library" is_bitfield="true">
			Opens all libraries.
		</constant>
		<constant name="LOAD_MODE_ANY" value="0" enum="LoadMode">
			The loading mode automatically selects the appropriate mode based on the content.
		</constant>
		<constant name="LOAD_MODE_TEXT" value="1" enum="LoadMode">
			This mode is used to load Lua source code.
		</constant>
		<constant name="LOAD_MODE_BINARY" value="2" enum="LoadMode">
			This mode is used to load compiled Lua bytecode.
			.luac files are typically generated from .lua files using: [code]luac -o target_file.luac source_file.lua[/code] .luac files contain the instruction set that the Lua virtual machine can execute directly, making them faster to load than source code files.
			[b]Note: .luac files are typically generated for a specific Lua version and may require the same version to run.[/b]
		</constant>
	</constants>
</class>
